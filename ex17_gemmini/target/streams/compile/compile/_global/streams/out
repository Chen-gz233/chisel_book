[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/freechips/rocketchip/scala/devices/debug/Debug.scala:1402:12: The s-interpolator prints the Scala .toString of Data objects rather than the value of the hardware wire during simulation. Use the cf-interpolator instead. If you want an elaboration time check, call assert with a Boolean condition.[0m
[0m[[0m[33mwarn[0m] [0m[0m    assert ((hartSelFuncs.hartSelToHartId(selectedHartReg) < flags.size.U),[0m
[0m[[0m[33mwarn[0m] [0m[0m           ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/freechips/rocketchip/scala/devices/debug/SBA.scala:222:88: Passing an Int to .U is usually a mistake: It does *not* set the width but does a bit extract.[0m
[0m[[0m[33mwarn[0m] [0m[0mDid you mean .U(i.W)?[0m
[0m[[0m[33mwarn[0m] [0m[0mIf you do want bit extraction, use .U.extract(i) instead.[0m
[0m[[0m[33mwarn[0m] [0m[0m        sbErrorReg(i) := Mux(sberrorWrEn && SBCSWrData.sberror(i) === 1.U, NoError.id.U(i), // W1C[0m
[0m[[0m[33mwarn[0m] [0m[0m                                                                                       ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/freechips/rocketchip/scala/devices/debug/SBA.scala:223:148: Passing an Int to .U is usually a mistake: It does *not* set the width but does a bit extract.[0m
[0m[[0m[33mwarn[0m] [0m[0mDid you mean .U(i.W)?[0m
[0m[[0m[33mwarn[0m] [0m[0mIf you do want bit extraction, use .U.extract(i) instead.[0m
[0m[[0m[33mwarn[0m] [0m[0m                         Mux((sb2tl.module.io.wrEn && !sb2tl.module.io.wrLegal) || (sb2tl.module.io.rdEn && !sb2tl.module.io.rdLegal), BadAddr.id.U(i), // Bad address accessed[0m
[0m[[0m[33mwarn[0m] [0m[0m                                                                                                                                                   ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/freechips/rocketchip/scala/devices/debug/SBA.scala:224:86: Passing an Int to .U is usually a mistake: It does *not* set the width but does a bit extract.[0m
[0m[[0m[33mwarn[0m] [0m[0mDid you mean .U(i.W)?[0m
[0m[[0m[33mwarn[0m] [0m[0mIf you do want bit extraction, use .U.extract(i) instead.[0m
[0m[[0m[33mwarn[0m] [0m[0m                         Mux((tryWrEn || tryRdEn) && sbAlignmentError, AlgnError.id.U(i), // Address alignment error[0m
[0m[[0m[33mwarn[0m] [0m[0m                                                                                     ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/freechips/rocketchip/scala/devices/debug/SBA.scala:225:83: Passing an Int to .U is usually a mistake: It does *not* set the width but does a bit extract.[0m
[0m[[0m[33mwarn[0m] [0m[0mDid you mean .U(i.W)?[0m
[0m[[0m[33mwarn[0m] [0m[0mIf you do want bit extraction, use .U.extract(i) instead.[0m
[0m[[0m[33mwarn[0m] [0m[0m                         Mux((tryWrEn || tryRdEn) && sbAccessError, BadAccess.id.U(i), // Access size error[0m
[0m[[0m[33mwarn[0m] [0m[0m                                                                                  ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/freechips/rocketchip/scala/devices/debug/SBA.scala:226:126: Passing an Int to .U is usually a mistake: It does *not* set the width but does a bit extract.[0m
[0m[[0m[33mwarn[0m] [0m[0mDid you mean .U(i.W)?[0m
[0m[[0m[33mwarn[0m] [0m[0mIf you do want bit extraction, use .U.extract(i) instead.[0m
[0m[[0m[33mwarn[0m] [0m[0m                         Mux((sb2tl.module.io.rdDone || sb2tl.module.io.wrDone) && sb2tl.module.io.respError, OtherError.id.U(i), sbErrorReg(i)))))) // Response error from TL[0m
[0m[[0m[33mwarn[0m] [0m[0m                                                                                                                             ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/testchipip/scala/Network.scala:105:11: The s-interpolator prints the Scala .toString of Data objects rather than the value of the hardware wire during simulation. Use the cf-interpolator instead. If you want an elaboration time check, call assert with a Boolean condition.[0m
[0m[[0m[33mwarn[0m] [0m[0m    assert(!in.a.valid || PopCount(aMatches) === 1.U,[0m
[0m[[0m[33mwarn[0m] [0m[0m          ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/testchipip/scala/Network.scala:107:11: The s-interpolator prints the Scala .toString of Data objects rather than the value of the hardware wire during simulation. Use the cf-interpolator instead. If you want an elaboration time check, call assert with a Boolean condition.[0m
[0m[[0m[33mwarn[0m] [0m[0m    assert(!in.c.valid || PopCount(cMatches) === 1.U,[0m
[0m[[0m[33mwarn[0m] [0m[0m          ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/testchipip/scala/Network.scala:109:11: The s-interpolator prints the Scala .toString of Data objects rather than the value of the hardware wire during simulation. Use the cf-interpolator instead. If you want an elaboration time check, call assert with a Boolean condition.[0m
[0m[[0m[33mwarn[0m] [0m[0m    assert(!in.e.valid || PopCount(eMatches) === 1.U,[0m
[0m[[0m[33mwarn[0m] [0m[0m          ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/testchipip/scala/Network.scala:163:11: The s-interpolator prints the Scala .toString of Data objects rather than the value of the hardware wire during simulation. Use the cf-interpolator instead. If you want an elaboration time check, call assert with a Boolean condition.[0m
[0m[[0m[33mwarn[0m] [0m[0m    assert(!out.b.valid || PopCount(bMatches) === 1.U,[0m
[0m[[0m[33mwarn[0m] [0m[0m          ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/testchipip/scala/Network.scala:165:11: The s-interpolator prints the Scala .toString of Data objects rather than the value of the hardware wire during simulation. Use the cf-interpolator instead. If you want an elaboration time check, call assert with a Boolean condition.[0m
[0m[[0m[33mwarn[0m] [0m[0m    assert(!out.d.valid || PopCount(dMatches) === 1.U,[0m
[0m[[0m[33mwarn[0m] [0m[0m          ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/testchipip/scala/TraceIO.scala:201:17: The s-interpolator prints the Scala .toString of Data objects rather than the value of the hardware wire during simulation. Use the cf-interpolator instead. If you want an elaboration time print, use println.[0m
[0m[[0m[33mwarn[0m] [0m[0m          printf(s"TRACEPORT ${idx}: %x\n", trace.insns.reverse.asUInt.pad(512))[0m
[0m[[0m[33mwarn[0m] [0m[0m                ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/testchipip/scala/Unittests.scala:451:13: The s-interpolator prints the Scala .toString of Data objects rather than the value of the hardware wire during simulation. Use the cf-interpolator instead. If you want an elaboration time check, call assert with a Boolean condition.[0m
[0m[[0m[33mwarn[0m] [0m[0m      assert(io.in.bits.payload === streamExpect(streamIdx), s"Unexpected data at output ${id}")[0m
[0m[[0m[33mwarn[0m] [0m[0m            ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/testchipip/scala/Unittests.scala:452:13: The s-interpolator prints the Scala .toString of Data objects rather than the value of the hardware wire during simulation. Use the cf-interpolator instead. If you want an elaboration time check, call assert with a Boolean condition.[0m
[0m[[0m[33mwarn[0m] [0m[0m      assert(io.in.bits.last === streamLast, s"Unexpect last at output ${id}")[0m
[0m[[0m[33mwarn[0m] [0m[0m            ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/testchipip/scala/Unittests.scala:456:9: The s-interpolator prints the Scala .toString of Data objects rather than the value of the hardware wire during simulation. Use the cf-interpolator instead. If you want an elaboration time check, call assert with a Boolean condition.[0m
[0m[[0m[33mwarn[0m] [0m[0m  assert(!io.in.valid || io.in.bits.netId === id.U, s"Output ${id} got data intended for another")[0m
[0m[[0m[33mwarn[0m] [0m[0m        ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/sifive/devices/gpio/GPIO.scala:278:44: match may not be exhaustive.[0m
[0m[[0m[33mwarn[0m] [0m[0mIt would fail on the following input: CreditedCrossing(_, _)[0m
[0m[[0m[33mwarn[0m] [0m[0m      gpioClockDomainWrapper.clockNode := (controlXType match {[0m
[0m[[0m[33mwarn[0m] [0m[0m                                           ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/sifive/devices/gpio/GPIO.scala:295:6: match may not be exhaustive.[0m
[0m[[0m[33mwarn[0m] [0m[0mIt would fail on the following input: CreditedCrossing(_, _)[0m
[0m[[0m[33mwarn[0m] [0m[0m    (intXType match {[0m
[0m[[0m[33mwarn[0m] [0m[0m     ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/sifive/devices/i2c/I2C.scala:608:43: match may not be exhaustive.[0m
[0m[[0m[33mwarn[0m] [0m[0mIt would fail on the following input: CreditedCrossing(_, _)[0m
[0m[[0m[33mwarn[0m] [0m[0m      i2cClockDomainWrapper.clockNode := (controlXType match {[0m
[0m[[0m[33mwarn[0m] [0m[0m                                          ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/sifive/devices/i2c/I2C.scala:625:6: match may not be exhaustive.[0m
[0m[[0m[33mwarn[0m] [0m[0mIt would fail on the following input: CreditedCrossing(_, _)[0m
[0m[[0m[33mwarn[0m] [0m[0m    (intXType match {[0m
[0m[[0m[33mwarn[0m] [0m[0m     ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/sifive/devices/pwm/PWM.scala:130:43: match may not be exhaustive.[0m
[0m[[0m[33mwarn[0m] [0m[0mIt would fail on the following input: CreditedCrossing(_, _)[0m
[0m[[0m[33mwarn[0m] [0m[0m      pwmClockDomainWrapper.clockNode := (controlXType match {[0m
[0m[[0m[33mwarn[0m] [0m[0m                                          ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/sifive/devices/pwm/PWM.scala:147:6: match may not be exhaustive.[0m
[0m[[0m[33mwarn[0m] [0m[0mIt would fail on the following input: CreditedCrossing(_, _)[0m
[0m[[0m[33mwarn[0m] [0m[0m    (intXType match {[0m
[0m[[0m[33mwarn[0m] [0m[0m     ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/sifive/devices/uart/UART.scala:230:44: match may not be exhaustive.[0m
[0m[[0m[33mwarn[0m] [0m[0mIt would fail on the following input: CreditedCrossing(_, _)[0m
[0m[[0m[33mwarn[0m] [0m[0m      uartClockDomainWrapper.clockNode := (controlXType match {[0m
[0m[[0m[33mwarn[0m] [0m[0m                                           ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/sifive/devices/uart/UART.scala:247:6: match may not be exhaustive.[0m
[0m[[0m[33mwarn[0m] [0m[0mIt would fail on the following input: CreditedCrossing(_, _)[0m
[0m[[0m[33mwarn[0m] [0m[0m    (intXType match {[0m
[0m[[0m[33mwarn[0m] [0m[0m     ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/sifive/devices/wdt/TLWDT.scala:85:43: match may not be exhaustive.[0m
[0m[[0m[33mwarn[0m] [0m[0mIt would fail on the following input: CreditedCrossing(_, _)[0m
[0m[[0m[33mwarn[0m] [0m[0m      wdtClockDomainWrapper.clockNode := (controlXType match {[0m
[0m[[0m[33mwarn[0m] [0m[0m                                          ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/chen/chisel_book/ex17_gemmini/src/main/scala/sifive/devices/wdt/TLWDT.scala:102:6: match may not be exhaustive.[0m
[0m[[0m[33mwarn[0m] [0m[0mIt would fail on the following input: CreditedCrossing(_, _)[0m
[0m[[0m[33mwarn[0m] [0m[0m    (intXType match {[0m
[0m[[0m[33mwarn[0m] [0m[0m     ^[0m
[0m[[0m[33mwarn[0m] [0m[0mthere were 128 deprecation warnings (since Chisel 3.5)[0m
[0m[[0m[33mwarn[0m] [0m[0mthere was one deprecation warning (since rocket-chip 1.3)[0m
[0m[[0m[33mwarn[0m] [0m[0mthere were 129 deprecation warnings in total; re-run with -deprecation for details[0m
[0m[[0m[33mwarn[0m] [0m[0mthere were 4692 feature warnings; re-run with -feature for details[0m
[0m[[0m[33mwarn[0m] [0m[0m29 warnings found[0m
